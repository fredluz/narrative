<!-- QuestLog Code Structure Documentation -->
<CodeStructure>
  <ObjectTypes>
    <!-- From utils/dateFormatters.ts -->
    <ObjectType name="DateStyle" file="utils/dateFormatters.ts">
      <Value name="default" />
      <Value name="deadline" />
      <Value name="compact" />
    </ObjectType>

    <!-- From app/types.ts -->
    <ObjectType name="BaseEntity" file="app/types.ts">
      <Property name="id" type="number" />
      <Property name="created_at" type="string" />
      <Property name="updated_at" type="string" />
      <Property name="tags" type="string[] | undefined" />
    </ObjectType>

    <ObjectType name="Task" file="app/types.ts">
      <Property name="id" type="number" />
      <Property name="created_at" type="string" />
      <Property name="updated_at" type="string" />
      <Property name="tags" type="string[] | undefined" />
      <Property name="title" type="string" />
      <Property name="description" type="string | undefined" />
      <Property name="scheduled_for" type="string" />
      <Property name="location" type="string" />
      <Property name="quest_id" type="number" />
      <Property name="deadline" type="string | undefined" />
      <Property name="status" type="'ToDo' | 'InProgress' | 'Done'" />
      <Property name="quest" type="Quest | undefined" />
    </ObjectType>

    <ObjectType name="JournalEntry" file="app/types.ts">
      <Property name="id" type="number" />
      <Property name="created_at" type="string" />
      <Property name="updated_at" type="string" />
      <Property name="tags" type="string[] | undefined" />
      <Property name="title" type="string" />
      <Property name="user_entry" type="string" />
      <Property name="ai_analysis" type="string" />
      <Property name="ai_response" type="string" />
    </ObjectType>

    <ObjectType name="CheckupEntry" file="app/types.ts">
      <Property name="id" type="number" />
      <Property name="created_at" type="string" />
      <Property name="updated_at" type="string" />
      <Property name="tags" type="string[] | undefined" />
      <Property name="content" type="string" />
      <Property name="daily_entry_id" type="number | undefined" />
      <Property name="ai_checkup_response" type="string | undefined" />
    </ObjectType>

    <ObjectType name="Quest" file="app/types.ts">
      <Property name="id" type="number" />
      <Property name="created_at" type="string" />
      <Property name="updated_at" type="string" />
      <Property name="tags" type="string[] | undefined" />
      <Property name="title" type="string" />
      <Property name="tagline" type="string" />
      <Property name="description" type="string | undefined" />
      <Property name="is_main" type="boolean" />
      <Property name="status" type="'Active' | 'On-Hold' | 'Completed'" />
      <Property name="tasks" type="Task[] | undefined" />
      <Property name="analysis" type="string | undefined" />
      <Property name="parent_quest_id" type="number | undefined" />
      <Property name="start_date" type="string | undefined" />
      <Property name="end_date" type="string | undefined" />
      <Property name="relevance" type="string | undefined" />
      <Property name="relevantTasks" type="{ taskId: number; name: string; description: string; relevance: string }[] | undefined" />
    </ObjectType>

    <ObjectType name="ChatMessage" file="app/types.ts">
      <Property name="id" type="number" />
      <Property name="created_at" type="string" />
      <Property name="updated_at" type="string" />
      <Property name="tags" type="string[] | undefined" />
      <Property name="message" type="string" />
      <Property name="is_user" type="boolean" />
      <Property name="chat_session_id" type="string | undefined" />
    </ObjectType>

    <ObjectType name="ChatSession" file="app/types.ts">
      <Property name="id" type="number" />
      <Property name="created_at" type="string" />
      <Property name="updated_at" type="string" />
      <Property name="tags" type="string[]" />
      <Property name="summary" type="string" />
    </ObjectType>

    <!-- From services/tasksService.ts -->
    <ObjectType name="TaskStatus" file="services/tasksService.ts">
      <Value name="TODO" />
      <Value name="IN_PROGRESS" />
      <Value name="DONE" />
    </ObjectType>

    <!-- From types/deepseek.ts -->
    <ObjectType name="Delta" file="types/deepseek.ts">
      <Property name="reasoning_content" type="string | undefined" />
      <Property name="content" type="string | undefined" />
      <Property name="role" type="string | undefined" />
    </ObjectType>

    <!-- From services/questsService.ts -->
    <ObjectType name="QuestUpdate" file="services/questsService.ts">
      <Property name="id" type="number" />
      <Property name="title" type="string" />
      <Property name="tagline" type="string" />
      <Property name="description" type="string | undefined" />
      <Property name="is_main" type="boolean" />
      <Property name="status" type="'Active' | 'On-Hold' | 'Completed'" />
      <Property name="analysis" type="string | undefined" />
      <Property name="parent_quest_id" type="number | undefined" />
      <Property name="start_date" type="string | undefined" />
      <Property name="end_date" type="string | undefined" />
      <Property name="tags" type="string[] | undefined" />
    </ObjectType>

    <ObjectType name="QuestInput" file="services/questsService.ts">
      <Description>Omits id, created_at, updated_at, and tasks from Quest type</Description>
      <Property name="description" type="string | undefined" />
    </ObjectType>

    <ObjectType name="QuestRealtimePayload" file="services/questsService.ts">
      <Description>RealtimePostgresChangesPayload of QuestUpdate</Description>
    </ObjectType>

    <!-- From services/journalService.ts -->
    <ObjectType name="JournalEntry" file="services/journalService.ts">
      <Property name="id" type="string" />
      <Property name="created_at" type="string" />
      <Property name="updated_at" type="string" />
      <Property name="tags" type="string[]" />
      <Property name="title" type="string" />
      <Property name="user_entry" type="string" />
      <Property name="ai_analysis" type="string" />
      <Property name="ai_response" type="string" />
      <Property name="date" type="string | undefined" />
      <Description>Daily entries from journal_entries table</Description>
    </ObjectType>

    <ObjectType name="CheckupEntry" file="services/journalService.ts">
      <Property name="id" type="string" />
      <Property name="created_at" type="string" />
      <Property name="content" type="string" />
      <Property name="tags" type="string[]" />
      <Property name="daily_entry_id" type="number | undefined" />
      <Property name="ai_checkup_response" type="string | undefined" />
      <Description>Checkup entries from checkup_entries table</Description>
    </ObjectType>

    <!-- From services/agents/JournalAgent.ts -->
    <ObjectType name="JournalAgent" file="services/agents/JournalAgent.ts">
      <Property name="openai" type="OpenAI" />
      <Property name="questAgent" type="QuestAgent" />
      <Description>AI agent for processing journal entries and generating responses</Description>
    </ObjectType>

    <!-- From services/agents/ChatAgent.ts -->
    <ObjectType name="ChatAgent" file="services/agents/ChatAgent.ts">
      <Property name="openai" type="OpenAI" />
      <Property name="questAgent" type="QuestAgent" />
      <Description>AI agent for handling chat interactions and managing chat sessions</Description>
    </ObjectType>

    <!-- From services/agents/QuestAgent.ts -->
    <ObjectType name="TaskRelevanceItem" file="services/agents/QuestAgent.ts">
      <Property name="taskId" type="number" />
      <Property name="name" type="string" />
      <Property name="description" type="string" />
      <Property name="relevance" type="string" />
      <Description>Represents the relevance of a task to a journal entry</Description>
    </ObjectType>

    <ObjectType name="QuestRelevanceItem" file="services/agents/QuestAgent.ts">
      <Property name="questId" type="number" />
      <Property name="isRelevant" type="boolean" />
      <Property name="relevance" type="string | undefined" />
      <Property name="relevantTasks" type="TaskRelevanceItem[]" />
      <Description>Represents the relevance of a quest and its tasks to a journal entry</Description>
    </ObjectType>

    <ObjectType name="QuestAgent" file="services/agents/QuestAgent.ts">
      <Property name="genAI" type="GoogleGenerativeAI" />
      <Property name="model" type="GenerativeModel" />
      <Description>AI agent for analyzing quest relevance to journal entries using Google's Generative AI</Description>
    </ObjectType>

    <!-- From contexts/ThemeContext.tsx -->
    <ObjectType name="ThemeContextType" file="contexts/ThemeContext.tsx">
      <Property name="themeColor" type="string" />
      <Property name="secondaryColor" type="string" />
      <Property name="setThemeColor" type="(color: string) => void" />
      <Property name="setSecondaryColor" type="(color: string) => void" />
      <Property name="textColor" type="string" />
      <Description>Theme context for managing application colors</Description>
    </ObjectType>

    <!-- From contexts/QuestUpdateContext.tsx -->
    <ObjectType name="QuestUpdateContextType" file="contexts/QuestUpdateContext.tsx">
      <Property name="triggerUpdate" type="() => void" />
      <Property name="shouldUpdate" type="boolean" />
      <Property name="resetUpdate" type="() => void" />
      <Description>Context for managing quest update notifications across the app</Description>
    </ObjectType>

    <!-- From contexts/SupabaseContext.tsx -->
    <ObjectType name="SupabaseContextType" file="contexts/SupabaseContext.tsx">
      <Property name="session" type="Session | null" />
      <Property name="isLoading" type="boolean" />
      <Description>Context for managing Supabase authentication state</Description>
    </ObjectType>

    <!-- From components/chat/ChatInterface.tsx -->
    <ObjectType name="ChatInterfaceProps" file="components/chat/ChatInterface.tsx">
      <Property name="recentMessages" type="ChatMessage[]" />
      <Property name="onSendMessage" type="(message: string) => Promise<void>" />
      <Property name="handleTyping" type="(text: string) => void" />
      <Property name="isTyping" type="boolean" />
      <Property name="sessionEnded" type="boolean" />
      <Property name="checkupCreated" type="boolean" />
      <Property name="onEndSession" type="() => void" />
      <Description>Props for the ChatInterface component</Description>
    </ObjectType>

    <!-- From components/journal/JournalPanel.tsx -->
    <ObjectType name="JournalPanelProps" file="components/journal/JournalPanel.tsx">
      <Property name="themeColor" type="string" />
      <Property name="textColor" type="string" />
      <Property name="fullColumnMode" type="boolean" defaultValue="false" />
      <Description>Props for the JournalPanel component</Description>
    </ObjectType>

    <!-- From components/journal/AIAnalysis.tsx -->
    <ObjectType name="AIAnalysisProps" file="components/journal/AIAnalysis.tsx">
      <Property name="analysis" type="string | null" />
      <Property name="loading" type="boolean" />
      <Property name="fullColumnMode" type="boolean | undefined" />
      <Property name="themeColor" type="string" />
      <Description>Props for the AIAnalysis component</Description>
    </ObjectType>

    <!-- From components/journal/AIResponse.tsx -->
    <ObjectType name="AIResponseProps" file="components/journal/AIResponse.tsx">
      <Property name="response" type="string | null" />
      <Property name="loading" type="boolean" />
      <Property name="aiGenerating" type="boolean" />
      <Property name="fullColumnMode" type="boolean | undefined" />
      <Property name="secondaryColor" type="string" />
      <Description>Props for the AIResponse component</Description>
    </ObjectType>

    <!-- From components/journal/JournalEntryInput.tsx -->
    <ObjectType name="JournalEntryInputProps" file="components/journal/JournalEntryInput.tsx">
      <Property name="value" type="string" />
      <Property name="tagsValue" type="string" />
      <Property name="onChangeText" type="(text: string) => void" />
      <Property name="onChangeTags" type="(text: string) => void" />
      <Property name="loading" type="boolean" />
      <Property name="fullColumnMode" type="boolean | undefined" />
      <Property name="themeColor" type="string" />
      <Description>Props for the journal entry input component</Description>
    </ObjectType>

    <!-- From components/journal/CheckupItem.tsx -->
    <ObjectType name="CheckupItemProps" file="components/journal/CheckupItem.tsx">
      <Property name="checkup" type="CheckupEntry" />
      <Property name="themeColor" type="string" />
      <Property name="onPress" type="() => void" />
      <Property name="isExpanded" type="boolean" />
      <Description>Props for the CheckupItem component</Description>
    </ObjectType>

    <!-- From components/quests/QuestsOverview.tsx -->
    <ObjectType name="QuestsOverviewProps" file="components/quests/QuestsOverview.tsx">
      <Property name="quests" type="Quest[]" />
      <Property name="onSelectQuest" type="(questId: number) => void" />
      <Property name="currentMainQuest" type="Quest | null" />
      <Description>Props for the QuestsOverview component</Description>
    </ObjectType>

    <ObjectType name="TaskFormData" file="components/quests/QuestsOverview.tsx">
      <Property name="title" type="string" />
      <Property name="description" type="string" />
      <Property name="scheduled_for" type="string" />
      <Property name="deadline" type="string | undefined" />
      <Property name="location" type="string | undefined" />
      <Property name="status" type="TaskStatus" />
      <Property name="tags" type="string[] | undefined" />
      <Description>Form data structure for creating/editing tasks</Description>
    </ObjectType>

    <ObjectType name="QuestFormData" file="components/quests/QuestsOverview.tsx">
      <Property name="title" type="string" />
      <Property name="tagline" type="string" />
      <Property name="description" type="string" />
      <Property name="status" type="QuestStatus" />
      <Property name="start_date" type="string | undefined" />
      <Property name="end_date" type="string | undefined" />
      <Property name="is_main" type="boolean" />
      <Description>Form data structure for creating/editing quests</Description>
    </ObjectType>

    <!-- From components/quests/KanbanBoard.tsx -->
    <ObjectType name="KanbanProps" file="components/quests/KanbanBoard.tsx">
      <Property name="mainQuest" type="Quest | null" />
      <Property name="onViewAllQuests" type="() => void | undefined" />
      <Description>Props for the KanbanBoard component</Description>
    </ObjectType>

    <!-- From components/tasks/TaskList.tsx -->
    <ObjectType name="TaskListProps" file="components/tasks/TaskList.tsx">
      <Property name="compactMode" type="boolean" defaultValue="false" />
      <Description>Props for the TaskList component with optional compact view mode</Description>
    </ObjectType>

    <!-- From components/modals/CreateQuestModal.tsx -->
    <ObjectType name="CreateQuestModalProps" file="components/modals/CreateQuestModal.tsx">
      <Property name="visible" type="boolean" />
      <Property name="onClose" type="() => void" />
      <Property name="onSubmit" type="(data: QuestFormData) => Promise<void>" />
      <Property name="isSubmitting" type="boolean" />
      <Description>Props for the CreateQuestModal component</Description>
    </ObjectType>

    <!-- From components/modals/CreateTaskModal.tsx -->
    <ObjectType name="CreateTaskModalProps" file="components/modals/CreateTaskModal.tsx">
      <Property name="visible" type="boolean" />
      <Property name="onClose" type="() => void" />
      <Property name="onSubmit" type="(data: TaskFormData) => Promise<void>" />
      <Property name="isSubmitting" type="boolean" />
      <Description>Props for the CreateTaskModal component</Description>
    </ObjectType>

    <ObjectType name="TaskFormData" file="components/modals/CreateTaskModal.tsx">
      <Property name="title" type="string" />
      <Property name="description" type="string" />
      <Property name="scheduled_for" type="string" />
      <Property name="deadline" type="string | undefined" />
      <Property name="location" type="string | undefined" />
      <Property name="status" type="TaskStatus" />
      <Property name="tags" type="string[] | undefined" />
      <Description>Form data structure for creating/editing tasks</Description>
    </ObjectType>

    <!-- From components/modals/EditQuestModal.tsx -->
    <ObjectType name="EditQuestModalProps" file="components/modals/EditQuestModal.tsx">
      <Property name="visible" type="boolean" />
      <Property name="onClose" type="() => void" />
      <Property name="onSubmit" type="(data: QuestFormData) => Promise<void>" />
      <Property name="isSubmitting" type="boolean" />
      <Property name="quest" type="Quest | undefined" />
      <Description>Props for the EditQuestModal component</Description>
    </ObjectType>

    <!-- From components/modals/EditTaskModal.tsx -->
    <ObjectType name="EditTaskModalProps" file="components/modals/EditTaskModal.tsx">
      <Property name="visible" type="boolean" />
      <Property name="onClose" type="() => void" />
      <Property name="onSubmit" type="(data: TaskFormData) => Promise<void>" />
      <Property name="isSubmitting" type="boolean" />
      <Property name="task" type="Task | undefined" />
      <Description>Props for the EditTaskModal component</Description>
    </ObjectType>

    <!-- From components/ui/ThemedView.tsx -->
    <ObjectType name="ThemedViewProps" file="components/ui/ThemedView.tsx">
      <Property name="lightColor" type="string | undefined" />
      <Property name="darkColor" type="string | undefined" />
      <Description>Props for the ThemedView component, extends React Native ViewProps</Description>
    </ObjectType>

    <!-- From components/ui/ThemedText.tsx -->
    <ObjectType name="ThemedTextProps" file="components/ui/ThemedText.tsx">
      <Property name="lightColor" type="string | undefined" />
      <Property name="darkColor" type="string | undefined" />
      <Property name="type" type="'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link'" defaultValue="'default'" />
      <Description>Props for the ThemedText component, extends React Native TextProps</Description>
    </ObjectType>

    <!-- From components/ui/ColorPicker.tsx -->
    <ObjectType name="ColorPickerProps" file="components/ui/ColorPicker.tsx">
      <Property name="color" type="string" />
      <Property name="onColorChange" type="(color: string) => void" />
      <Property name="label" type="string" />
      <Property name="textColor" type="string" />
      <Description>Props for the ColorPicker component</Description>
    </ObjectType>

    <!-- From components/loading/TriangularSpinner.tsx -->
    <ObjectType name="TriangularSpinnerProps" file="components/loading/TriangularSpinner.tsx">
      <Property name="size" type="number" defaultValue="24" />
      <Property name="color" type="string" defaultValue="#BBB" />
      <Description>Props for the TriangularSpinner component</Description>
    </ObjectType>

    <!-- More object types will be added as analysis continues -->
  </ObjectTypes>

  <Variables>
    <!-- Variables identified so far -->
    <!-- More variables will be added as analysis continues -->
  </Variables>

  <Functions>
    <!-- From utils/dateFormatters.ts -->
    <Function name="formatDateTime" returnType="string" file="utils/dateFormatters.ts">
      <Parameter name="isoDateString" type="string | null" />
      <Parameter name="style" type="DateStyle" defaultValue="'default'" />
    </Function>

    <!-- From services/tasksService.ts -->
    <Function name="fetchTasks" returnType="Promise<Task[]>" file="services/tasksService.ts">
      <Description>Fetches all tasks with their associated quest information</Description>
      <Implementation>
        - Queries tasks table with quest relationship join
        - Orders by scheduled_for date ascending 
        - Returns tasks with linked quest data
      </Implementation>
    </Function>

    <Function name="fetchTasksByQuest" returnType="Promise<Task[]>" file="services/tasksService.ts">
      <Parameter name="questId" type="string" />
      <Description>Fetches all tasks for a specific quest</Description>
      <Implementation>
        - Filters tasks by quest_id
        - Orders by scheduled_for date ascending
      </Implementation>
    </Function>

    <Function name="updateTaskStatus" returnType="Promise<Task>" file="services/tasksService.ts">
      <Parameter name="taskId" type="string" />
      <Parameter name="status" type="TaskStatus" />
    </Function>
    <Function name="updateTaskStatus" returnType="Promise<void>" file="services/tasksService.ts">
      <Parameter name="taskId" type="number" />
      <Parameter name="newStatus" type="TaskStatus" />
      <Description>Updates the status of a task</Description>
      <Implementation>
        - Updates task status in tasks table
        - Updates updated_at timestamp
      </Implementation>
    </Function>

    <Function name="createTask" returnType="Promise<Task>" file="services/tasksService.ts">
      <Parameter name="taskData" type="{ title: string; description?: string; status: TaskStatus; quest_id: number; scheduled_for: string; deadline?: string; location?: string; }" />
      <Description>Creates a new task</Description>
      <Implementation>
        - Adds timestamps (created_at, updated_at)
        - Inserts task into tasks table
        - Returns created task data
      </Implementation>
    </Function>

    <Function name="getNextStatus" returnType="TaskStatus" file="services/tasksService.ts">
      <Parameter name="currentStatus" type="string" />
      <Description>Gets the next status in the task status cycle</Description>
      <Implementation>
        - Cycles through ToDo -> InProgress -> Done -> ToDo
      </Implementation>
    </Function>

    <Function name="useTasks" returnType="{ tasks: Task[]; loading: boolean; error: Error | null }" file="services/tasksService.ts" />
    <Function name="useTasks" returnType="{ tasks: Task[]; taskListVisible: boolean; setTaskListVisible: (visible: boolean) => void; loading: boolean; error: string | null; reload: () => Promise<void> }" file="services/tasksService.ts">
      <Description>React hook for managing tasks state</Description>
      <Implementation>
        - Maintains tasks array state
        - Handles loading and error states
        - Provides visibility toggle for task list
        - Includes reload function for refreshing tasks
      </Implementation>
    </Function>

    <!-- From services/questsService.ts -->
    <Function name="fetchQuests" returnType="Promise<Quest[]>" file="services/questsService.ts">
      <Description>Fetches all quests with their tasks, ordered by creation date descending</Description>
    </Function>
    <Function name="fetchQuests" returnType="Promise<Quest[]>" file="services/questsService.ts">
      <Description>Fetches all quests with their tasks</Description>
      <Implementation>
        - Queries quests table with full task relationship data
        - Includes all quest metadata (tags, dates, status, etc.)
        - Orders by creation date descending
      </Implementation>
    </Function>

    <Function name="createQuest" returnType="Promise<Quest>" file="services/questsService.ts">
      <Parameter name="quest" type="Partial<Quest>" />
    </Function>
    <Function name="createQuest" returnType="Promise<Quest>" file="services/questsService.ts">
      <Parameter name="questData" type="QuestInput" />
      <Description>Creates a new quest, handling empty timestamps</Description>
    </Function>
    <Function name="createQuest" returnType="Promise<Quest>" file="services/questsService.ts">
      <Parameter name="questData" type="QuestInput" />
      <Description>Creates a new quest</Description>
      <Implementation>
        - Cleans up empty timestamp fields (converts to null)
        - Adds created_at and updated_at timestamps
        - Inserts quest into quests table
        - Returns created quest data
      </Implementation>
    </Function>

    <Function name="updateQuest" returnType="Promise<void>" file="services/questsService.ts">
      <Parameter name="questId" type="string" />
      <Parameter name="quest" type="Partial<Quest>" />
    </Function>
    <Function name="updateQuest" returnType="Promise<void>" file="services/questsService.ts">
      <Parameter name="questId" type="number" />
      <Parameter name="questData" type="QuestInput" />
      <Description>Updates an existing quest, handling empty timestamps</Description>
    </Function>
    <Function name="updateQuest" returnType="Promise<void>" file="services/questsService.ts">
      <Parameter name="questId" type="number" />
      <Parameter name="questData" type="QuestInput" />
      <Description>Updates an existing quest</Description>
      <Implementation>
        - Cleans up empty timestamp fields
        - Updates quest data in quests table
        - Updates updated_at timestamp
      </Implementation>
    </Function>

    <Function name="updateMainQuest" returnType="Promise<void>" file="services/questsService.ts">
      <Parameter name="questId" type="number" />
      <Description>Updates which quest is marked as the main quest via RPC call</Description>
    </Function>
    <Function name="updateMainQuest" returnType="Promise<void>" file="services/questsService.ts">
      <Parameter name="questId" type="number" />
      <Description>Updates which quest is marked as the main quest</Description>
      <Implementation>
        - Uses RPC call to update_main_quest database function
        - Function handles setting all other quests as non-main
      </Implementation>
    </Function>

    <Function name="useQuests" returnType="{ mainQuest: Quest | null; quests: Quest[]; setQuestAsMain: (questId: number) => Promise<void>; loading: boolean; error: string | null; reload: () => Promise<void> }" file="services/questsService.ts">
      <Description>React hook for managing quests state and operations</Description>
    </Function>
    <Function name="useQuests" returnType="{ mainQuest: Quest | null; quests: Quest[]; setQuestAsMain: (questId: number) => Promise<void>; loading: boolean; error: string | null; reload: () => Promise<void> }" file="services/questsService.ts">
      <Description>React hook for managing quests state</Description>
      <Implementation>
        - Maintains quests array state
        - Provides current main quest
        - Handles optimistic updates for main quest changes
        - Includes error handling and state recovery
        - Provides reload function for refreshing quests
      </Implementation>
      <Features>
        - Optimistic updates for better UX
        - Automatic error recovery
        - Main quest tracking
        - State management
      </Features>
    </Function>
    
    <!-- From services/journalService.ts -->
    <Function name="fetchJournalEntries" returnType="Promise<JournalEntry[]>" file="services/journalService.ts" />
    <Function name="createJournalEntry" returnType="Promise<JournalEntry>" file="services/journalService.ts">
      <Parameter name="entry" type="Partial<JournalEntry>" />
    </Function>

    <Function name="getEntry" returnType="Promise<JournalEntry | null>" file="services/journalService.ts">
      <Parameter name="date" type="string" />
      <Description>Get daily entry for a specific date</Description>
    </Function>

    <Function name="getEntries" returnType="Promise<JournalEntry[]>" file="services/journalService.ts">
      <Parameter name="startDate" type="string" />
      <Parameter name="endDate" type="string" />
      <Description>Get daily entries for a date range</Description>
    </Function>

    <Function name="generateAIResponses" returnType="Promise<{ response: string; analysis: string }>" file="services/journalService.ts">
      <Parameter name="entryId" type="string" />
      <Parameter name="content" type="string" />
      <Description>Generate combined AI responses via JournalAgent</Description>
    </Function>

    <Function name="generateResponse" returnType="Promise<string>" file="services/journalService.ts">
      <Parameter name="content" type="string" />
      <Description>Generate just the response</Description>
    </Function>

    <Function name="generateAnalysis" returnType="Promise<string>" file="services/journalService.ts">
      <Parameter name="content" type="string" />
      <Description>Generate just the analysis</Description>
    </Function>

    <Function name="getCheckupEntries" returnType="Promise<CheckupEntry[]>" file="services/journalService.ts">
      <Parameter name="date" type="string" />
      <Description>Get all checkup entries for a specific date</Description>
    </Function>

    <Function name="saveCheckupEntry" returnType="Promise<CheckupEntry>" file="services/journalService.ts">
      <Parameter name="date" type="string" />
      <Parameter name="content" type="string" />
      <Parameter name="tags" type="string[]" defaultValue="[]" />
      <Parameter name="aiResponse" type="string | undefined" />
      <Description>Save a checkup entry with optional AI response</Description>
    </Function>

    <Function name="getTimeSinceString" returnType="string" file="services/journalService.ts">
      <Parameter name="date" type="Date" />
      <Description>Generate a human-readable "time since" string</Description>
    </Function>

    <Function name="getUnsavedCheckupEntries" returnType="Promise<CheckupEntry[]>" file="services/journalService.ts">
      <Parameter name="date" type="string" />
      <Description>Get checkup entries that aren't yet linked to a daily entry</Description>
    </Function>

    <Function name="saveDailyEntry" returnType="Promise<JournalEntry>" file="services/journalService.ts">
      <Parameter name="date" type="string" />
      <Parameter name="currentText" type="string | undefined" />
      <Description>Save daily entry and link all unlinked checkups</Description>
    </Function>

    <Function name="getCheckupsForDailyEntry" returnType="Promise<CheckupEntry[]>" file="services/journalService.ts">
      <Parameter name="dailyEntryId" type="string" />
      <Description>Find all checkups associated with a specific daily entry</Description>
    </Function>

    <!-- From services/agents/JournalAgent.ts -->
    <Function name="generateResponse" returnType="Promise<string>" file="services/agents/JournalAgent.ts">
      <Parameter name="currentEntry" type="string" />
      <Parameter name="previousCheckupsContext" type="string | undefined" />
      <Description>Generates an AI response to a journal entry, considering previous context</Description>
    </Function>

    <Function name="generateAnalysis" returnType="Promise<string>" file="services/agents/JournalAgent.ts">
      <Parameter name="currentEntry" type="string" />
      <Parameter name="previousCheckupsContext" type="string | undefined" />
      <Description>Generates an AI analysis of a journal entry, considering previous context</Description>
    </Function>

    <Function name="processJournalEntry" returnType="Promise<{ response: string; analysis: string }>" file="services/agents/JournalAgent.ts">
      <Parameter name="currentEntry" type="string" />
      <Parameter name="previousCheckupsContext" type="string | undefined" />
      <Description>Processes a journal entry to generate both response and analysis</Description>
    </Function>

    <Function name="processEndOfDay" returnType="Promise<{ response: string; analysis: string }>" file="services/agents/JournalAgent.ts">
      <Parameter name="allCheckupEntries" type="string" />
      <Description>Processes all checkup entries for the day to generate end-of-day summary and analysis</Description>
    </Function>

    <Function name="createResponsePrompt" returnType="Promise<string>" file="services/agents/JournalAgent.ts" private="true">
      <Parameter name="currentEntry" type="string" />
      <Parameter name="context" type="Array<{ entry: string; response: string; updated_at: string }>" />
      <Parameter name="previousCheckupsContext" type="string | undefined" />
      <Description>Creates a prompt for generating responses, including quest context</Description>
    </Function>

    <Function name="createAnalysisPrompt" returnType="Promise<string>" file="services/agents/JournalAgent.ts" private="true">
      <Parameter name="currentEntry" type="string" />
      <Parameter name="context" type="Array<{ entry: string; analysis: string; updated_at: string }>" />
      <Parameter name="previousCheckupsContext" type="string | undefined" />
      <Description>Creates a prompt for generating analysis, including quest context</Description>
    </Function>

    <Function name="createEndOfDayPrompt" returnType="Promise<string>" file="services/agents/JournalAgent.ts" private="true">
      <Parameter name="allCheckupEntriesWithResponses" type="string" />
      <Description>Creates a prompt for end-of-day processing, including quest progress</Description>
    </Function>

    <!-- From services/agents/ChatAgent.ts -->
    <Function name="generateResponse" returnType="Promise<string>" file="services/agents/ChatAgent.ts">
      <Parameter name="content" type="string" />
      <Parameter name="previousCheckupsContext" type="string | undefined" />
      <Description>Generates an AI response to chat content using the JournalAgent</Description>
    </Function>

    <Function name="generateChatResponse" returnType="Promise<string[]>" file="services/agents/ChatAgent.ts">
      <Parameter name="message" type="string" />
      <Description>Generates multiple chat messages as responses, split by line breaks</Description>
    </Function>

    <Function name="summarizeAndStoreSession" returnType="Promise<string>" file="services/agents/ChatAgent.ts">
      <Parameter name="messages" type="ChatMessage[]" />
      <Description>Creates a summary of the chat session and stores it with tags</Description>
    </Function>

    <Function name="createCheckupEntryFromSession" returnType="Promise<void>" file="services/agents/ChatAgent.ts">
      <Parameter name="messages" type="ChatMessage[]" />
      <Parameter name="summary" type="string" />
      <Parameter name="tags" type="string[]" />
      <Description>Creates a journal checkup entry from a completed chat session</Description>
    </Function>

    <Function name="generateCheckupContent" returnType="Promise<string>" file="services/agents/ChatAgent.ts" private="true">
      <Parameter name="messages" type="ChatMessage[]" />
      <Parameter name="summary" type="string" />
      <Description>Generates journal entry content from chat messages in user's voice</Description>
    </Function>

    <!-- From services/agents/QuestAgent.ts -->
    <Function name="findRelevantQuests" returnType="Promise<Quest[]>" file="services/agents/QuestAgent.ts">
      <Parameter name="journalContent" type="string" />
      <Description>Analyzes journal content to find relevant quests and their tasks</Description>
    </Function>

    <Function name="validateAndRepairJson" returnType="Promise<QuestRelevanceItem | null>" file="services/agents/QuestAgent.ts" private="true">
      <Parameter name="rawResponse" type="string" />
      <Parameter name="questId" type="number" />
      <Description>Validates and repairs AI-generated JSON responses</Description>
    </Function>

    <Function name="cleanResponseText" returnType="string" file="services/agents/QuestAgent.ts" private="true">
      <Parameter name="response" type="string" />
      <Description>Cleans AI response text by removing markdown and code markers</Description>
    </Function>

    <!-- From hooks/useJournal.ts -->
    <Function name="useJournal" returnType="{ currentDate: Date; getEntry: (date: Date) => JournalEntry | null; getAiResponses: (date: Date) => { response: string | null; analysis: string | null }; updateLocalEntry: (date: Date, content: string) => void; saveEntry: (date: Date, content: string, tags?: string[]) => Promise<JournalEntry>; goToPreviousDay: () => void; goToNextDay: () => void; loading: boolean; error: string | null; refreshEntries: () => Promise<void>; aiResponse: string | null; aiAnalysis: string | null }" file="hooks/useJournal.ts">
      <Description>React hook for managing journal entries and navigation</Description>
    </Function>

    <!-- From hooks/useChatData.ts -->
    <Function name="useChatData" returnType="{ messages: ChatMessage[]; sendMessage: (messageText: string) => Promise<void>; handleTyping: (text: string) => void; endSession: () => Promise<void>; isTyping: boolean; sessionEnded: boolean; checkupCreated: boolean }" file="hooks/useChatData.ts">
      <Description>React hook for managing chat interactions with Johnny Silverhand AI. Handles message sending, typing indicators, session management, and automatic session termination after inactivity.</Description>
      <Constants>
        <Constant name="INACTIVITY_TIMEOUT" value="300000" description="5 minutes in milliseconds" />
        <Constant name="JOHNNY_RESPONSE_DELAY" value="2000" description="2 seconds delay before Johnny replies" />
        <Constant name="MESSAGE_STAGGER_DELAY" value="1000" description="1 second between sequential messages" />
      </Constants>
    </Function>

    <!-- From hooks/useThemeColor.ts -->
    <Function name="useThemeColor" returnType="string" file="hooks/useThemeColor.ts">
      <Parameter name="props" type="{ light?: string; dark?: string }" />
      <Parameter name="colorName" type="keyof typeof Colors.light & keyof typeof Colors.dark" />
      <Description>React hook for getting theme-appropriate colors with optional prop overrides</Description>
    </Function>

    <!-- From contexts/ThemeContext.tsx -->
    <Function name="ThemeProvider" returnType="JSX.Element" file="contexts/ThemeContext.tsx">
      <Parameter name="children" type="React.ReactNode" />
      <Description>Provider component for theme context with persistence via AsyncStorage</Description>
    </Function>

    <Function name="useTheme" returnType="ThemeContextType" file="contexts/ThemeContext.tsx">
      <Description>Hook for accessing theme context values and methods</Description>
    </Function>

    <Function name="isDark" returnType="boolean" file="contexts/ThemeContext.tsx" private="true">
      <Parameter name="color" type="string" />
      <Description>Utility function to determine if a color is dark based on brightness</Description>
    </Function>

    <!-- From contexts/QuestUpdateContext.tsx -->
    <Function name="QuestUpdateProvider" returnType="JSX.Element" file="contexts/QuestUpdateContext.tsx">
      <Parameter name="children" type="React.ReactNode" />
      <Description>Provider component for managing quest update state</Description>
    </Function>

    <Function name="useQuestUpdate" returnType="QuestUpdateContextType" file="contexts/QuestUpdateContext.tsx">
      <Description>Hook for accessing quest update context values and methods</Description>
    </Function>

    <!-- From contexts/SupabaseContext.tsx -->
    <Function name="SupabaseProvider" returnType="JSX.Element" file="contexts/SupabaseContext.tsx">
      <Parameter name="children" type="React.ReactNode" />
      <Description>Provider component for managing Supabase authentication state and session</Description>
    </Function>

    <Function name="useSupabase" returnType="SupabaseContextType" file="contexts/SupabaseContext.tsx">
      <Description>Hook for accessing Supabase authentication context and session information</Description>
    </Function>

    <!-- From components/chat/ChatInterface.tsx -->
    <Function name="ChatInterface" returnType="JSX.Element" file="components/chat/ChatInterface.tsx">
      <Parameter name="props" type="ChatInterfaceProps" />
      <Description>React component for rendering a cyberpunk-themed chat interface with Johnny Silverhand</Description>
      <Features>
        <Feature>Cyberpunk-themed design with glitch effects and digital noise</Feature>
        <Feature>Real-time typing indicators</Feature>
        <Feature>Session management with end session functionality</Feature>
        <Feature>Message history with timestamps</Feature>
        <Feature>Keyboard-aware input handling</Feature>
      </Features>
    </Function>

    <!-- From components/journal/JournalPanel.tsx -->
    <Function name="JournalPanel" returnType="JSX.Element" file="components/journal/JournalPanel.tsx">
      <Parameter name="props" type="JournalPanelProps" />
      <Description>React component for managing journal entries, checkups, and AI responses</Description>
      <Features>
        <Feature>Daily journal entry management</Feature>
        <Feature>Checkup entries with AI responses</Feature>
        <Feature>Date navigation with previous/next day controls</Feature>
        <Feature>Tags support for entries</Feature>
        <Feature>Real-time AI analysis and responses</Feature>
        <Feature>Cyberpunk-themed UI with dynamic styling</Feature>
      </Features>
    </Function>

    <!-- From components/journal/AIAnalysis.tsx -->
    <Function name="AIAnalysis" returnType="JSX.Element" file="components/journal/AIAnalysis.tsx">
      <Parameter name="props" type="AIAnalysisProps" />
      <Description>React component for displaying AI-generated analysis with cyberpunk styling</Description>
      <Features>
        <Feature>Scrollable analysis display</Feature>
        <Feature>Loading state handling</Feature>
        <Feature>Responsive layout with fullColumnMode support</Feature>
        <Feature>Themed styling with custom color support</Feature>
      </Features>
    </Function>

    <!-- From components/journal/AIResponse.tsx -->
    <Function name="AIResponse" returnType="JSX.Element" file="components/journal/AIResponse.tsx">
      <Parameter name="props" type="AIResponseProps" />
      <Description>React component for displaying Johnny Silverhand's AI responses with cyberpunk styling</Description>
      <Features>
        <Feature>Scrollable response display</Feature>
        <Feature>Loading and AI generation state indicators</Feature>
        <Feature>Responsive text sizing with fullColumnMode</Feature>
        <Feature>Cyberpunk-themed text effects with shadow</Feature>
        <Feature>Dynamic loading animation with TriangularSpinner</Feature>
      </Features>
    </Function>

    <!-- From components/journal/JournalEntryInput.tsx -->
    <Function name="JournalEntryInput" returnType="JSX.Element" file="components/journal/JournalEntryInput.tsx">
      <Parameter name="props" type="JournalEntryInputProps" />
      <Description>React component for journal entry input with tags and cyberpunk styling</Description>
      <Features>
        <Feature>Multi-line journal entry input</Feature>
        <Feature>Separate tags input field</Feature>
        <Feature>Loading state handling</Feature>
        <Feature>Responsive layout with fullColumnMode support</Feature>
        <Feature>Theme-aware styling</Feature>
      </Features>
    </Function>

    <!-- From components/journal/CheckupItem.tsx -->
    <Function name="CheckupItem" returnType="JSX.Element" file="components/journal/CheckupItem.tsx">
      <Parameter name="props" type="CheckupItemProps" />
      <Description>React component for displaying individual checkup entries with expandable detail view</Description>
      <Features>
        <Feature>Expandable/collapsible content</Feature>
        <Feature>Timestamp display</Feature>
        <Feature>Content summary in collapsed view</Feature>
        <Feature>Full content with AI response in expanded view</Feature>
        <Feature>Themed styling with cyberpunk effects</Feature>
      </Features>
    </Function>

    <!-- From components/quests/QuestsOverview.tsx -->
    <Function name="QuestsOverview" returnType="JSX.Element" file="components/quests/QuestsOverview.tsx">
      <Parameter name="props" type="QuestsOverviewProps" />
      <Description>React component for managing and displaying quests and their associated tasks</Description>
      <Features>
        <Feature>Two-panel layout with quest list and quest details</Feature>
        <Feature>Quest status filtering (Active/On-Hold/Completed)</Feature>
        <Feature>Create/Edit quest functionality</Feature>
        <Feature>Create/Edit task functionality</Feature>
        <Feature>Task status management</Feature>
        <Feature>Main quest designation</Feature>
        <Feature>Cyberpunk-themed UI with dynamic styling</Feature>
      </Features>
    </Function>

    <Function name="getBrightAccent" returnType="string" file="components/quests/QuestsOverview.tsx" private="true">
      <Parameter name="baseColor" type="string" />
      <Description>Utility function to generate bright accent colors for text visibility</Description>
    </Function>

    <!-- From components/quests/KanbanBoard.tsx -->
    <Function name="KanbanBoard" returnType="JSX.Element" file="components/quests/KanbanBoard.tsx">
      <Parameter name="props" type="KanbanProps" />
      <Description>React component for displaying and managing tasks in a kanban-style board</Description>
      <Features>
        <Feature>Main quest display with status and dates</Feature>
        <Feature>Task filtering (Active/Done/All)</Feature>
        <Feature>Task status management with visual indicators</Feature>
        <Feature>Date and location metadata display</Feature>
        <Feature>Deadline warnings</Feature>
        <Feature>Loading states for task status updates</Feature>
        <Feature>Empty state handling</Feature>
        <Feature>Cyberpunk-themed UI with dynamic styling</Feature>
      </Features>
    </Function>

    <Function name="getBrightAccent" returnType="string" file="components/quests/KanbanBoard.tsx" private="true">
      <Parameter name="baseColor" type="string" />
      <Description>Utility function to generate bright accent colors for better visibility</Description>
    </Function>

    <Function name="isDarkColor" returnType="boolean" file="components/quests/KanbanBoard.tsx" private="true">
      <Parameter name="color" type="string" />
      <Description>Utility function to determine if a color is dark based on brightness</Description>
    </Function>

    <!-- From components/tasks/TaskList.tsx -->
    <Function name="TaskList" returnType="JSX.Element" file="components/tasks/TaskList.tsx">
      <Parameter name="props" type="TaskListProps" />
      <Description>React component for displaying and managing a list of tasks with cyberpunk styling</Description>
      <Features>
        <Feature>Responsive layout with compact/full mode support</Feature>
        <Feature>Task status toggle functionality</Feature>
        <Feature>Loading, error, and empty states</Feature>
        <Feature>Dynamic height calculation based on available space</Feature>
        <Feature>Real-time task updates with QuestUpdateContext integration</Feature>
        <Feature>Cyberpunk UI with glitch effects and dynamic styling</Feature>
        <Feature>Task descriptions and quest associations</Feature>
      </Features>
    </Function>

    <Function name="getBrightAccent" returnType="string" file="components/tasks/TaskList.tsx" private="true">
      <Parameter name="baseColor" type="string" />
      <Description>Utility function to generate bright accent colors for better visibility</Description>
    </Function>

    <!-- From components/modals/CreateQuestModal.tsx -->
    <Function name="CreateQuestModal" returnType="JSX.Element" file="components/modals/CreateQuestModal.tsx">
      <Parameter name="props" type="CreateQuestModalProps" />
      <Description>React component for creating new quests with a modal interface</Description>
      <Features>
        <Feature>Form fields for quest title, tagline, description, and dates</Feature>
        <Feature>Quest status selection (Active/On-Hold/Completed)</Feature>
        <Feature>Main quest toggle option</Feature>
        <Feature>Loading state handling</Feature>
        <Feature>Form validation</Feature>
        <Feature>Cyberpunk-themed styling</Feature>
      </Features>
    </Function>

    <!-- From components/modals/CreateTaskModal.tsx -->
    <Function name="CreateTaskModal" returnType="JSX.Element" file="components/modals/CreateTaskModal.tsx">
      <Parameter name="props" type="CreateTaskModalProps" />
      <Description>React component for creating new tasks with a modal interface</Description>
      <Features>
        <Feature>Form fields for task title, description, and dates</Feature>
        <Feature>Task status selection (ToDo/InProgress/Done)</Feature>
        <Feature>Optional location and deadline fields</Feature>
        <Feature>Tag management with comma-separated input</Feature>
        <Feature>Loading state handling</Feature>
        <Feature>Form validation</Feature>
        <Feature>Cyberpunk-themed styling</Feature>
      </Features>
    </Function>

    <!-- From components/modals/EditQuestModal.tsx -->
    <Function name="EditQuestModal" returnType="JSX.Element" file="components/modals/EditQuestModal.tsx">
      <Parameter name="props" type="EditQuestModalProps" />
      <Description>React component for editing existing quests with a modal interface</Description>
      <Features>
        <Feature>Auto-populated form fields with existing quest data</Feature>
        <Feature>Quest status selection (Active/On-Hold/Completed)</Feature>
        <Feature>Main quest toggle option</Feature>
        <Feature>Loading state handling</Feature>
        <Feature>Form validation</Feature>
        <Feature>Cyberpunk-themed styling</Feature>
        <Feature>Date fields with optional end date</Feature>
      </Features>
    </Function>

    <!-- From components/modals/EditTaskModal.tsx -->
    <Function name="EditTaskModal" returnType="JSX.Element" file="components/modals/EditTaskModal.tsx">
      <Parameter name="props" type="EditTaskModalProps" />
      <Description>React component for editing existing tasks with a modal interface</Description>
      <Features>
        <Feature>Auto-populated form fields with existing task data</Feature>
        <Feature>Task status selection (ToDo/InProgress/Done)</Feature>
        <Feature>Optional location and deadline fields</Feature>
        <Feature>Tag management with comma-separated input</Feature>
        <Feature>Date fields with validation</Feature>
        <Feature>Loading state handling</Feature>
        <Feature>Form validation</Feature>
        <Feature>Cyberpunk-themed styling</Feature>
      </Features>
    </Function>

    <!-- From components/ui/ThemedView.tsx -->
    <Function name="ThemedView" returnType="JSX.Element" file="components/ui/ThemedView.tsx">
      <Parameter name="props" type="ThemedViewProps" />
      <Description>React component that provides theme-aware styling for View components</Description>
      <Features>
        <Feature>Dynamic background color based on theme</Feature>
        <Feature>Support for light/dark mode color overrides</Feature>
        <Feature>Passes through all standard View props</Feature>
      </Features>
    </Function>

    <!-- From components/ui/ThemedText.tsx -->
    <Function name="ThemedText" returnType="JSX.Element" file="components/ui/ThemedText.tsx">
      <Parameter name="props" type="ThemedTextProps" />
      <Description>React component that provides theme-aware styling for Text components</Description>
      <Features>
        <Feature>Dynamic text color based on theme</Feature>
        <Feature>Support for light/dark mode color overrides</Feature>
        <Feature>Predefined text styles (default, title, defaultSemiBold, subtitle, link)</Feature>
        <Feature>Passes through all standard Text props</Feature>
        <Feature>Consistent typography with defined font sizes and line heights</Feature>
      </Features>
    </Function>

    <!-- From components/ui/ColorPicker.tsx -->
    <Function name="ColorPicker" returnType="JSX.Element" file="components/ui/ColorPicker.tsx">
      <Parameter name="props" type="ColorPickerProps" />
      <Description>React component that provides a color wheel picker with preview</Description>
      <Features>
        <Feature>Color wheel selector with thumb control</Feature>
        <Feature>Current color preview</Feature>
        <Feature>Color value display</Feature>
        <Feature>Customizable label and text colors</Feature>
        <Feature>Smooth color selection (noSnap)</Feature>
      </Features>
    </Function>

    <!-- From components/loading/TriangularSpinner.tsx -->
    <Function name="TriangularSpinner" returnType="JSX.Element" file="components/loading/TriangularSpinner.tsx">
      <Parameter name="props" type="TriangularSpinnerProps" />
      <Description>React component that renders a cyberpunk-style loading animation with dots moving in a triangular pattern</Description>
      <Features>
        <Feature>Smooth animation using requestAnimationFrame</Feature>
        <Feature>Dynamic dot scaling during motion</Feature>
        <Feature>Wireframe triangle path</Feature>
        <Feature>Configurable size and color</Feature>
        <Feature>SVG-based rendering for crisp graphics</Feature>
        <Feature>Continuous clockwise rotation of dots</Feature>
        <Feature>Center-based radial animation</Feature>
      </Features>
    </Function>

    <!-- More functions will be added as analysis continues -->
  </Functions>
</CodeStructure>

<!-- This documentation was updated after analyzing app/types.ts -->
<!-- This documentation was updated after analyzing services/journalService.ts -->
<!-- This documentation was updated after analyzing services/agents/JournalAgent.ts -->
<!-- This documentation was updated after analyzing services/agents/ChatAgent.ts -->
<!-- This documentation was updated after analyzing services/agents/QuestAgent.ts -->
<!-- This documentation was updated after analyzing hooks/useJournal.ts -->
<!-- This documentation was updated after analyzing hooks/useChatData.ts -->
<!-- This documentation was updated after analyzing hooks/useThemeColor.ts -->
<!-- This documentation was updated after analyzing contexts/ThemeContext.tsx -->
<!-- This documentation was updated after analyzing contexts/QuestUpdateContext.tsx -->
<!-- This documentation was updated after analyzing contexts/SupabaseContext.tsx -->
<!-- This documentation was updated after analyzing components/chat/ChatInterface.tsx -->
<!-- This documentation was updated after analyzing components/journal/JournalPanel.tsx -->
<!-- This documentation was updated after analyzing components/journal/AIAnalysis.tsx -->
<!-- This documentation was updated after analyzing components/journal/AIResponse.tsx -->
<!-- This documentation was updated after analyzing components/journal/JournalEntryInput.tsx -->
<!-- This documentation was updated after analyzing components/journal/CheckupItem.tsx -->
<!-- This documentation was updated after analyzing components/quests/QuestsOverview.tsx -->
<!-- This documentation was updated after analyzing components/quests/KanbanBoard.tsx -->
<!-- This documentation was updated after analyzing components/tasks/TaskList.tsx -->
<!-- This documentation was updated after analyzing components/modals/EditTaskModal.tsx -->
<!-- This documentation was updated after analyzing components/ui/ThemedView.tsx -->
<!-- This documentation was updated after analyzing components/ui/ThemedText.tsx -->